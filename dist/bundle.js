/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!*************************!*\
  !*** ./jsSrc/trying.js ***!
  \*************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("\r\n// try {\r\n//     // if(true){\r\n//     //     throw {\r\n//     //         name : \"One Error\",\r\n//     //         message : \"this is a  err\"\r\n//     //     }\r\n//     // }\r\n//       varing();\r\n// } catch (err) {\r\n//     console.log(err.message);\r\n// }finally {\r\n//     console.log(\"the end\")\r\n// }\r\n\r\n// var i = 0;\r\n// var list =[];\r\n// setInterval(function(){\r\n//     list.push(i);\r\n//     i++;\r\n//     console.log(list);\r\n// },1000)\r\n\r\n\r\n\r\n// // \"useing string\"\r\n\r\n// let fullname = \"milad fattah\";\r\n// fullname.split(\" \");  // pushing to a array \r\n// fullname.replace(\"milad\" , \"ava\")  // change str milad  with  str ava\r\n// fullname.trim()  //Deleting  all  space in the str \r\n\r\n\r\n// //=======\r\n\r\n\r\n// var str = \"milad fattah\";\r\n// str.replace(\"milad\", \"ava\");\r\n// str.charAt(\"f\");\r\n// str.concat(\" from in iran / ardabill\");\r\n// str.indexOf();\r\n\r\n// setTimeout(function(){\r\n//     // alert()\r\n// },2000)\r\n\r\n// setInterval(function(){\r\n//     //alert()\r\n// },2000);\r\n\r\n// ;\r\n\r\n// // ===   console.log(d); // outpot date this day\r\n\r\n// d.getMilliseconds();\r\n\r\n\r\n// function randomingNumber(number) {\r\n//     return Math.floor(Math.random() * Math.floor(number+ 1));\r\n// }\r\n\r\n// var list = [];\r\n// var i = 0;\r\n// while(i <  5){\r\n//     list.push(randomingNumber(11));\r\n//     i++\r\n// }\r\n\r\n\r\n// console.log(list)\r\n// document.getElementById(\"list-two\").style.color = \"red\";\r\n// document.querySelectorAll(\".list-one .list-item\")[0].style.color  = \"blue\";\r\n// document.getElementsByClassName(\"list-item\")[1].style.color =\"red\";\r\n// document.getElementsByTagName(\"li\")[2].style.color = \"green\";\r\n\r\n// let form = document.createElement(\"form\");\r\n// form.setAttribute(\"action\",\"post\");\r\n// form.setAttribute(\"target\" ,\"html2.php\");\r\n\r\n// let input1 = document.createElement(\"input\");\r\n// input1.setAttribute(\"type\" , \"text\");\r\n// input1.setAttribute(\"placeholder\" , \"username\");\r\n \r\n// let br = document.createElement(\"br\");\r\n\r\n// let br2 = document.createElement(\"br\");\r\n\r\n// let input2 = document.createElement(\"input\");\r\n// input2.setAttribute(\"type\" , \"password\");\r\n// input2.setAttribute(\"placeholder\" , \"password\");\r\n\r\n// let accept = document.createElement(\"input\");\r\n// accept.setAttribute(\"type\" , \"submit\");\r\n// accept.setAttribute(\"value\", \"accept\");\r\n\r\n// form.appendChild(input1);\r\n// form.appendChild(br);\r\n// form.appendChild(input2);\r\n// form.appendChild(br2);\r\n// form.appendChild(accept);\r\n\r\n\r\n// document.querySelector(\".heading\").after(form);\r\n\r\n\r\n// var  Emouse = document.querySelector(\".heading\");\r\n\r\n// Emouse.onmouseenter = function(e){\r\n//     e.target.style.border  = \"1px solid red\";\r\n//     this.style.cursor = \"pointer\";\r\n// }\r\n// Emouse.onmouseleave = function(e){\r\n//     e.target.style.border = \"none\";\r\n\r\n// }\r\n\r\n// var parent = document.querySelector(\".parent\");\r\n// parent.addEventListener(\"click\" , function(e){\r\n//     console.log(\"clickParent\");\r\n// })\r\n\r\n\r\n\r\n// var child = document.querySelector(\".child\");\r\n// let childfunc =  function(e) {\r\n//     console.log(\"click_child\");\r\n//     e.stopPropagation();\r\n// };\r\n// child.addEventListener(\"click\" , childfunc);\r\n\r\n// setTimeout(function(){\r\n//     removeEventListener(\"click\",childfunc)\r\n// }, 1000)\r\n\r\n// let Form = document.querySelector(\".Form\");\r\n// Form.addEventListener(\"submit\" , function(e){\r\n//     e.preventDefault()\r\n//    var iN_one = document.querySelector(\".firstN\").value;\r\n//    var iN_two = document.querySelector(\".lastN\").value;\r\n\r\n//     var table = document.querySelector(\".table\");\r\n//     var tr1 = document.createElement(\"tr\");\r\n//     var td_f = document.createElement(\"td\");\r\n//     var td_l = document.createElement(\"td\");\r\n\r\n//     td_f.textContent = iN_one;\r\n//     td_l.textContent= iN_two;\r\n\r\n//     tr1.appendChild(td_f);\r\n//     tr1.appendChild(td_l);\r\n\r\n//     table.append(tr1);\r\n//     console.log( document.querySelectorAll(\"td\").textContent)\r\n// })\r\n\r\n// let submit = document.querySelector(\".submit\");\r\n// submit.style.backgroundColor = \"#a3a8a3\";\r\n// submit.addEventListener(\"mouseenter\" , function(){\r\n//     this.style.backgroundColor = \"green\";\r\n//     this.style.cursor = \"pointer\";\r\n// });\r\n// submit.addEventListener(\"mouseleave\" , function(){\r\n//     this.style.backgroundColor = \"#a3a8a3\";\r\n// });\r\n\r\n\r\n// var ajax = new XMLHttpRequest();\r\n\r\n// ajax.open(\"GET\" , \"https://jsonplaceholder.typicode.com/posts\");\r\n// ajax.onreadystatechange = function() {\r\n//     if(this.readyState == 4){\r\n//         if(this.status == 200){\r\n//                 console.log(\"success\", this.status);\r\n//         }else {\r\n//                 console.log(\"erorr\" , this.status)\r\n//         }\r\n//     }\r\n// }\r\n// ajax.send()\r\n\r\n\r\n\r\n// var ajax = new XMLHttpRequest();\r\n\r\n\r\n// ajax.open(\"GET\" , \"https://jsonplaceholder.typicode.com/posts\");\r\n// ajax.onreadystatechange = function(){\r\n//     if(ajax.readyState == 4){\r\n//         if(ajax.status == 200){\r\n//             console.log(\"successs : \", this.status  , this.response[\"body\"])\r\n//         }else {\r\n//             console.log(\"error\", this.status , this.response)\r\n//         }\r\n//     }\r\n// }\r\n// ajax.send();\r\n\r\n// JSON.stringify(data)   send data\r\n// // JSON.parse(this.response)  received data\r\n\r\n\r\n// let data = {\r\n//     name :\"Sara\",\r\n//     user : \"SWRW\"\r\n// }\r\n// let ajax= new XMLHttpRequest();\r\n\r\n// ajax.open('POST' , 'https://jsonplaceholder.typicode.com/users');\r\n// ajax.setRequestHeader('Content-type' ,  'application/json; charset=UTF-8');\r\n\r\n// ajax.addEventListener('load', function(){\r\n//     if(this.readyState == 4){\r\n//         if(this.status == 201){\r\n//             console.log(\"success\");\r\n//             let de = JSON.parse(this.response);\r\n//             console.log(de);\r\n//         }else {\r\n//             console.log('err : ' , this.status);\r\n//         }\r\n//     }\r\n// });\r\n\r\n// ajax.send(JSON.stringify(data));\r\n// ========================\r\n\r\n\r\n// function aa(name ,username , id){\r\n//     this.name = name;\r\n//     this.username = username; \r\n//     this.id = id;\r\n// }\r\n\r\n\r\n// let user1 = new aa(\"milad\" , \"alpha\" , 8);\r\n\r\n// let user2  = Object.create(user1);\r\n// user2.name = \"sara\";\r\n// Object.prototype.GODobject = function() {\r\n//     return 'I GOD OBJECT';\r\n// }\r\n\r\n// Array.prototype.GODArray = function () {\r\n//     return \"I GOD ARRAY\"\r\n// }\r\n// let user = {\r\n//     username : \"milad fattah\",\r\n//     id : 1001414,\r\n// }\r\n\r\n// function Car(name, model , yearmake){\r\n//     this.name = name ;\r\n//     this.model = model;\r\n//     this.yearmake = yearmake;\r\n//     this.details = function(){\r\n//         return this.name +\"/\"+ this.model +\"/\"+ this.yearmake +\"/\"+ this.details;\r\n//     }\r\n// }\r\n// Car.prototype.FU = function(){\r\n//     return \"i'm  a prototype \"\r\n// }\r\n// Car.prototype.detai = function () {\r\n//     return \"golobal prototype of car\"\r\n// }\r\n// Car.prototype.signal = function (){\r\n//     return \"i am is a signal of prototype CAR\";\r\n// }\r\n// let car1 = new Car(\"207\" , \"iranKhodroo\" , 1398);\r\n// let car2 = new Car(\"PEJO\" , \"iranKhodro\" , 1397);\r\n// let car3 = Object.create(car2);\r\n// car3.name = \"111\";\r\n// car3.model = \"saipa\";\r\n// let car5 = Object.create(car3)\r\n// car5.name = \"peraid\";\r\n// car5.slector =\"iam\";\r\n\r\n\r\n// let car6 = Object.create(car5);\r\n// car6.name = \"121\";\r\n// car6.buy = 2222;\r\n\r\n// let click =document.querySelector(\".submit\");\r\n\r\n// click.addEventListener(\"contextMenu\" , function(e){\r\n//     e.preventDefault();\r\n//     console.log(\"ok\");\r\n// })\r\n// let i = 0;\r\n// let list = [];\r\n// function adding(){\r\n//     list.push(i);\r\n//     i++;\r\n//     console.log(list);\r\n// }\r\n\r\n// setInterval(adding , 1000);\r\n\r\n\r\n// let cl = document.querySelector(\"#cl_1\");\r\n// cl.addEventListener(\"click\" , function(){\r\n//     clearInterval(adding);\r\n// })\r\n\r\n// ES6 =--------------------------------=============================================================\r\n\r\n\r\n// const LIST= [2,3,5,6];\r\n\r\n// LIST = [2132,3123,213]\r\n\r\n// let sum = (a,b) => a + b;\r\n\r\n// let sum = (a,b) => {\r\n//     return {a : a , b : b};\r\n// }\r\n\r\n// let sum = (a,b) => ({a: a , b: b});\r\n\r\n// let sum = (a,b) => (a + b);\r\n// let arr = [1,2,3,4];\r\n\r\n// // let sum = arr.map((item)=> item -1 );\r\n\r\n// console.log(sum);\r\n\r\n\r\n// function S(){\r\n//     this.name = \"sara\";\r\n//     this.age = 20;\r\n//     let that = this;\r\n//     this.full =  ()=>{\r\n//         console.log(that.name+\"/\"+that.age); \r\n//     }\r\n// }\r\n\r\n\r\n// function Person(){\r\n//     this.age = 0; \r\n//     setInterval(()=>{\r\n//         this.age +=2;\r\n//         console.log(this.age);\r\n//     },500)\r\n// }\r\n\r\n\r\n// let person1= new Person();\r\n\r\n\r\n// let obj = {\r\n//     a : 10, \r\n//     b : function(){\r\n//         return this.a;  //========== at right ==============\r\n//     },\r\n//     c: ()=>{\r\n//         return this.a;  //============worong ============\r\n//     }\r\n// }\r\n\r\n\r\n// console.log(obj.b());\r\n// console.log(obj.c());\r\n\r\n// let OBJ = {\r\n//     a : 10, \r\n//     b: function(){\r\n//        return this.a\r\n//     },\r\n//     c : ()=> this.a,\r\n//     d(){\r\n//         return this.a\r\n//     },\r\n//     g: \"milad\"\r\n// }\r\n\r\n\r\n// console.log(OBJ.b())\r\n// console.log(OBJ.c())\r\n// console.log(OBJ.d())\r\n\r\n\r\n//example :(\r\n\r\n    // let family = [\r\n    //     \"milad\",\r\n    //     \"sara\",\r\n    //     \"ava\"\r\n    // ];\r\n    // let result = family.map(item => item.length);\r\n    \r\n    // console.log(result);\r\n\r\n\r\n// let sum = function([a,b] = [2,2]){\r\n//     return a + b;\r\n// }\r\n\r\n\r\n// console.log(sum())\r\n\r\n\r\n\r\n// const OBJ = {\r\n//     num : 100,\r\n// }\r\n\r\n// window.num= 2020;\r\n\r\n// let st = function(a,b,c){\r\n//     return this.num + a + b +c ;\r\n// }\r\n\r\n\r\n// let result = st.apply(OBJ , [1,2,2]);\r\n// console.log(result);\r\n\r\n// =================================\r\n\r\n\r\n// const OBJ = {\r\n//     num :10\r\n// }\r\n// window.num = 2000;\r\n// let sum = (a,b,c)=>{\r\n//     return this.num + a + b+ c;\r\n// }\r\n\r\n// let result = sum.call(OBJ , 1,2,3);\r\n// console.log(result);  /// [object Object]\r\n\r\n// ===================\r\n\r\n// let sum = (...arg)=> {arg.length %2 == 0 ? console.log(\"z\" , arg) : console.log(\"f\" , arg) }\r\n// sum(2,5,34,6,7,78,8)\r\n\r\n//=================\r\n\r\n// let sum = (a,b,c,d)=>  a  + b + c + d;\r\n\r\n// let list = [1,2,3,2];\r\n// console.log(sum.apply(null, list));            //old syntax\r\n\r\n// console.log(sum(...list));             //new syntax\r\n\r\n// let list1 = [1,2,3];\r\n// let list2 = [3,4,5];\r\n// let list3 = [...list1 , ...list2];\r\n\r\n// console.log(list3)\r\n\r\n\r\n// let list1 =[2,2,4] , list2 = [3,4,5];\r\n// let list3 = [...list1, ...list2];\r\n\r\n// for(let item of list3){\r\n//     console.log(item);\r\n// }\r\n\r\n\r\n// let list = [2,34,5,6,7]\r\n\r\n// for(let item of list){\r\n//     console.log(item/2)\r\n// }\r\n\r\n\r\n\r\n// let list = [1, \"milad\" , true , 44, false]\r\n// let [,,item1 ,item2, item3] = list\r\n// console.log(item1, item2, item3)\r\n\r\n// let [name1 , name2,,,name3] = [\"milad\" , \"sara\" , \"ava\",\"negar\",\"sepehr\"]\r\n\r\n// let foo =()=> [\"milad\" , \"sara\" , \"mygirl\" , \"myboy\" , \"mymother\", \"myfather\", \"mysister\" ,\"mybrother\"]\r\n\r\n// let [name1, name2 , name3 , ...family] = foo()\r\n\r\n// console.log(name1 , name2, name3 , family)\r\n\r\n\r\n// =====================obj\r\n\r\n// let obj = {\r\n//     name : \"milad\",\r\n//     age : 20,\r\n//     life : ()=> \"i am very good life\",\r\n//     lovename : 'sara',\r\n//     girlname :\"ava\"\r\n// }\r\n\r\n\r\n// let { name , age , life : bar , ...family} = obj\r\n\r\n\r\n// console.log(name=\"fattah\" , age , bar() , family);\r\n\r\n// let result = ()=> [\"one\" , \"two\" , \"three\" , \"four\" , \"five\" , \"six\" , \"seven\" , \"eith\" , \"nain\" , \"teen\"]\r\n\r\n// let [number1 , number2 ,number3, ...other] = result();\r\n\r\n// console.log(number1, number2 , number3 , other)\r\n\r\n\r\n// let obj = {\r\n//     namecross : \"javascript\",\r\n//     period : 35,\r\n//     result : ()=> \"slowing but be right\"\r\n// }\r\n\r\n\r\n// let {namecross :name1 ,  period , result:bar } = obj\r\n\r\n\r\n// console.log(name1 , period, bar())\r\n\r\n// class Car{\r\n//         constructor(namecar , model , speed){\r\n//             this.namecar = namecar;\r\n//             this.model = model;\r\n//             this.speed = speed;\r\n//         }\r\n\r\n//         runspeed(){\r\n//             return ` My car name : ${this.namecar} and speed : ${this.speed}`\r\n//         }\r\n// }\r\n\r\n\r\n// let car1 = new Car(\"PEJO207\" , 99 , 220)\r\n\r\n// console.log(car1.runspeed())\r\n\r\n\r\n\r\n// class plant {\r\n//     constructor(name , color , height ){\r\n//         this.name = name;\r\n//         this.color = color;\r\n//         this.height = height + \"cm\";\r\n//     }\r\n//     generalExplanation(){\r\n//         return `plant name is : ${this.name} and color is ${this.color} and it is ${this.height}`\r\n//     }\r\n\r\n// }\r\n\r\n\r\n\r\n// let plant1 = new plant(\"roz\" , \"red\" , 20);\r\n\r\n// console.log(plant1)\r\n\r\n\r\n// class bors {\r\n//     constructor(name ,price ,change){\r\n//         this.name = name ;\r\n//         this.price = price; \r\n//         this.change = change +\"%\";\r\n//     }\r\n//     reslut(){\r\n//         return `saham name : ${this.name} , price : ${this.price}`\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// let saham1 = new bors(\"gesalem\" , 900 , -35)\r\n\r\n// console.log(saham1.reslut())\r\n\r\n\r\n// class CarIran{\r\n//     constructor(name ,make , year){\r\n//         this.name = name; \r\n//         this.make = make; \r\n//         this.year = year;\r\n//     }\r\n//     run(){\r\n//         return \"run speed up 200\"\r\n//     }\r\n\r\n//     fullmaking(){\r\n//         return `carName : ${this.name} , carMake : ${this.make}`\r\n//     }\r\n   \r\n// }\r\n\r\n// class CarSaipa extends CarIran{\r\n//     constructor(name , make ,year , color){\r\n//         super(name, make ,year)\r\n//         this.color =color\r\n//     }\r\n\r\n//     runs(){\r\n//         return this.run()\r\n//     }\r\n\r\n//     fullmaking(){\r\n//         console.log(super.fullmaking())\r\n//         return `CarName : ${this.name} , CarMake  : ${this.make} , CarColor : ${this.color}`\r\n//     }\r\n// }\r\n\r\n\r\n// let car1 = new CarIran(\"pejoPars\" , \"iran\" , 98)\r\n\r\n// let car2 = new CarSaipa(\"saipa111\" , \"iran\" ,99 ,\"green\")\r\n// console.log(car2)\r\n\r\n\r\n\r\n// class animal {\r\n//     constructor( number,name , height , age ){\r\n//         this.number = number\r\n//         this.name = name\r\n//         this.height = height\r\n//         this.age  = age\r\n//     }\r\n\r\n//     checkrun(){\r\n//         return `animal ${this.number} => name : ${this.name} , age : ${this.age} `\r\n//     }\r\n// }\r\n\r\n// class flyanimal extends animal {\r\n//     constructor(number, name, hight , age , speed , speedfly){\r\n//         super(number , name , hight , age)\r\n//         this.speed = speed\r\n//         this.speedfly = speedfly\r\n//     }\r\n\r\n//     checkrun(){\r\n\r\n//          return   this.speedfly == null ? super.checkrun() :   `animal ${this.number} => name : ${this.name} , age : ${this.age} , speedfly : ${this.speedfly}`\r\n        \r\n            \r\n//     }\r\n    \r\n\r\n//     explain(){\r\n//         return this.checkrun()\r\n//     }\r\n// }\r\n\r\n// let animal1 = new animal(1, \"morg\" , \"20cm\" , 2)\r\n\r\n\r\n// console.log(animal1.checkrun())\r\n\r\n// let animal2 =new flyanimal(2 , \"Crow\" , \"30cm\" , 43 , 30 , 222)\r\n\r\n// console.log(animal2.checkrun())\r\n\r\n\r\n\r\n// class Book {\r\n//     constructor(name , page , another){\r\n//         this.name = name ;\r\n//         this.page = page;\r\n//         this.another = another;\r\n//     }\r\n\r\n//     forbook(){\r\n//         return `nameBook : ${this.name} , pageBook : ${this.page}`\r\n//     }\r\n//     static run(){\r\n//         return `ruun book 100`\r\n//     }\r\n// }\r\n\r\n// class Bookforegin extends Book {\r\n//     constructor(name , page, another , country){\r\n//         super(name , page , another)\r\n//         this.country = country\r\n//     }\r\n\r\n//     forforegin(){\r\n//     return super.forbook() + `${this.country}`\r\n    \r\n//     }\r\n\r\n//      run(){\r\n//         return `ruun book 200`\r\n//     }\r\n\r\n//     fly(){\r\n//         return `fly book`\r\n//     }\r\n\r\n//      static go(){\r\n//         return this.run()\r\n//     }\r\n// }\r\n\r\n\r\n// let book1 = new Bookforegin(\"fotherPrice\" , 200 , 'MILAD' , \"iran\")\r\n\r\n// // console.log(book1.go())\r\n\r\n// console.log(Bookforegin.go())\r\n\r\n\r\n\r\n// class AdvansArray extends Array {\r\n//         result(value){\r\n//             let val = this.filter(item => item === value)\r\n//             return val.length == 0 ? \"error\" : value\r\n//         }\r\n// }\r\n\r\n\r\n// let list = new AdvansArray(\"milad\" ,\"malom nis\" , \"ava\")\r\n\r\n// console.log(list.result(\"miladd\"))\r\n\r\n// =====================================\r\n\r\n    // class fild {\r\n    //     constructor(){\r\n    //         this.list = []\r\n    //     }\r\n\r\n    //     set atseter(value){\r\n    //         this.list.push(value)\r\n    //     }\r\n\r\n    //     get atgeter(){\r\n    //         return this.list\r\n    //     }\r\n    // }\r\n\r\n    // let onelist= new fild()\r\n    // onelist.atseter = 2 \r\n    // onelist.atseter = 4\r\n    // console.log(onelist.atgeter)\r\n\r\n// ------------------------\r\n\r\n// class Foo {\r\n//     constructor(){\r\n//         this.log = [];\r\n//     }\r\n\r\n//     yy = \"milad\"\r\n//     get con(){\r\n//         return this.yy\r\n//     }\r\n//     set creent(value){\r\n    //         let x = this.log.push(value)\r\n//         return x\r\n//     }\r\n\r\n//     get result(){\r\n//         return this.log\r\n//     }\r\n// }\r\n\r\n\r\n// let n = new Foo()\r\n// n.creent = 2\r\n// console.log(n.con )\r\n\r\n// ===============================\r\n\r\n\r\n// let name = \"ava\"\r\n// let fn = \"milad 1\"\r\n// let keyname = \"keyname\"\r\n// let obj = {\r\n    //     name , \r\n    //     [fn] : \"milad\",\r\n//         say(){\r\n    //         return \"i am milad fattah\"\r\n    //     },\r\n    //     \"say 2\"(){\r\n    //         return \"i going harmonic music\"\r\n    //     }\r\n    \r\n    // }\r\n    \r\n    \r\n    // console.log(obj[\"milad 1\"])\r\n    \r\n// ===================================\r\n\r\n      // GOOD EXAMPLE FOR class\r\n    // class Car{\r\n    //     constructor(name , model , year){\r\n    //         this.name = name \r\n    //         this.model = model\r\n    //         this.yaer = year\r\n\r\n    //     }\r\n    //     monys(){\r\n    //         return \"100,000,000$\"\r\n    //     }\r\n    //     speed(){\r\n    //         return `${this.name} speed 200 km/h`\r\n    //     }\r\n    // }\r\n\r\n    // class Mottor extends Car {\r\n    //     constructor(name, model , year , mony){\r\n    //         super(name , model , year )\r\n    //         this.mony = mony\r\n    //     }\r\n\r\n    //     runspeed(){\r\n    //         return this.speed()\r\n    //     }\r\n\r\n    //     static monys(){\r\n            \r\n    //         return `/////` \r\n    //     }\r\n\r\n    // }\r\n\r\n    // let car1 = new Car(\"pejo207\" , \"irani\" , 99)\r\n    // let moto1= new Mottor(\"k250\" , \"honda\" , 99 , 14000000)\r\n\r\n    // console.log(Mottor.monys())\r\n\r\n\r\n\r\n// =======================\r\n\r\n\r\n    // let passwordsym = Symbol('discription : password')\r\n    // let idsym = Symbol.for('discription : id')\r\n\r\n\r\n    // let obj = {\r\n    //     name : \"milad\",\r\n    //     [passwordsym] : .001414,\r\n    //     [idsym] : \"#3322\"\r\n    // }\r\n\r\n    // let idfor = Symbol.for('discription : id')\r\n\r\n    // console.log(obj[idfor])\r\n\r\n\r\n\r\n    // class ReplaceX {\r\n    //     constructor(value){\r\n    //         this.value = value\r\n    //     }\r\n\r\n    //     [Symbol.replace](string){\r\n\r\n    //         return \"MILAD\"\r\n    //     }\r\n    // // }\r\n\r\n\r\n    // console.log('foo'.replace(new ReplaceX(\"BAR\")))\r\n\r\n\r\n\r\n    // let sympassword  = Symbol('sympassword')\r\n    // let symid = Symbol.for('symid')\r\n\r\n\r\n    // let obj = {\r\n    //     name : \"milad\",\r\n    //     [sympassword] : 101010,\r\n    //     [symid] : \"#2323\"\r\n    // }\r\n\r\n    // let forid= Symbol.for('symid')\r\n    // console.log(obj[forid])\r\n\r\n\r\n\r\n\r\n\r\n//    let list=  [1,2,3,4,5,6,7,8,9,222,\"milad\", \"sara\" , \"ava\" , \"fattah\"]\r\n\r\n    // let list2= Array(4)    //یک ارایه با چهار خانه خالی \r\n    // let list3= Array.of(4)  // true array create with value 4\r\n    // let list4 = Array.from(list , item=> item * 2)  //create new list with option map\r\n    // let list5 = list.find(item=>item % 2 ==0 )   //difirent or filter -> find return the first value but filter return all value\r\n    \r\n\r\n    // let arr = list.entries()\r\n    // for(let item of arr){\r\n    //     console.log(item)\r\n    // }\r\n\r\n    // let resultfill = list.fill(40,/* start */ 2, /* end */ 4)     // change value all index of list to 40\r\n\r\n    // let resultCopy = list.copyWithin(1,/*start*/5, /*end*/7)\r\n\r\n    \r\n\r\n\r\n\r\n    // let list2= list.copyWithin(1 , 10 ,13)\r\n\r\n    // console.log(list2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // class visit {\r\n    //     constructor(namevister , startvisit , endvisit , modelvisit){\r\n    //         this.namevister = namevister \r\n    //         this.startvisit =  startvisit \r\n    //         this.endvisit = endvisit\r\n    //         this.modelvisit = modelvisit\r\n\r\n\r\n    //         this.log = []\r\n    //     }\r\n\r\n    //     relsultVisit(){\r\n    //         return `VISITING ==> name : ${this.namevister} , end : ${this.endvisit} , model : ${this.modelvisit}`\r\n    //     }\r\n\r\n    //     set indexset(value){\r\n    //             this.log.push(value)\r\n    //     }\r\n\r\n    //     get indexget(){\r\n    //         return this.log\r\n    //     }\r\n    // }\r\n\r\n\r\n    // let sick1 = new visit(\"milad\" , '10/10' , \"this/day\" ,\"courna\")\r\n\r\n    // sick1.indexset = 4\r\n    // sick1.indexset = 3\r\n    // sick1.indexset = 2\r\n    // sick1.indexset = 1\r\n    // console.log(sick1.indexget)\r\n\r\n\r\n\r\n    // class visitHospital extends visit { \r\n    //     constructor(namevister,startvisit , endvisit , modelvisit , monyvisit , resultvisit){\r\n    //         super(namevister , startvisit , endvisit, modelvisit)\r\n    //         this.monyvisit= monyvisit\r\n    //         this.resultvisit = resultvisit\r\n    //     }\r\n        \r\n    //     static sick(){\r\n    //         return \"it is a sick man for visit to hospital\"\r\n    //     }\r\n\r\n    //    relsultVisit(){\r\n    //        return super.relsultVisit() +\"/\"+ `mony ${this.monyvisit} , resultvisit : ${this.resultvisit}`\r\n    //    }\r\n    // }\r\n\r\n\r\n    // let sick2 = new visitHospital(\"milad\" , '10/10' , \"this/day\" ,\"courna\" , 100000 , \"good\" )\r\n\r\n    // console.log(visitHospital.sick())\r\n\r\n\r\n\r\n    // let num  =  -1.99\r\n\r\n    // console.log( num, Number.isNaN(num))             //is nan ?\r\n    // console.log( num, Number.isInteger(num))         // is integer?\r\n    // console.log( num, Number.isFinite(num))          // is finite or is infinity\r\n\r\n\r\n    // console.log(Math.trunc(num))      // 1.55 ==> 1 and  -1.55 ==> -1\r\n    // console.log(Math.sign(num))       //return  -1 0 1 \r\n\r\n\r\n\r\n    // let  str = \"milad fattah\"\r\n\r\n   \r\n    // let result = str.includes(\"milad\" , 2)   // param1 => value for search // param2 => value for postion\r\n    // let result = str.startsWith(\"lad\" , 2)      // pram1=> value for search start string // param2 value for postion start search\r\n    // let result = str.endsWith(\"la\" ,4 )             //param1 => value for search to end string // param2 value for position end string\r\n    // console.log(result)\r\n\r\n\r\n    // let obj1 ={\r\n    //     name : \"milad\"\r\n    // }\r\n\r\n    // let obj2 = {\r\n    //     family : \"fattah\"\r\n    // }\r\n\r\n    // let obj = Object.assign(obj1, obj2)  // arg1 => target obj  // this method concatn two object\r\n\r\n    // console.log(obj)\r\n\r\n    // let obj1 ={\r\n    //     name : \"milad\",\r\n    //     age : 20 ,\r\n    //     family : \"fattah\"\r\n    // }\r\n\r\n    // let obj2 = {\r\n    //     name : \"ava\",\r\n    //     age : 0\r\n\r\n    // }\r\n\r\n\r\n    // let obj3 = Object.assign(obj1, obj2)\r\n\r\n    // console.log(obj3)\r\n\r\n\r\n    // class Class1 {\r\n    //     constructor(){\r\n    //         this.name = \"milad\"\r\n    //     }\r\n    // }\r\n\r\n    // class Class2 {\r\n    //     constructor(){\r\n    //         this.family =\"fattah\"\r\n    //     }\r\n    // }\r\n\r\n\r\n    // let obj1 = new Class1()\r\n    // let obj2 = new Class2()\r\n\r\n    // let obj3 = Object.assign(obj1, obj2)\r\n\r\n    // console.log(obj3)\r\n\r\n    // let obj1 = {\r\n    //     name : \"milad\",\r\n    //     family : \"fattah\",\r\n    //     username : \"alpha\",\r\n    //     age : 20,\r\n    //     from : \"iran\"\r\n    //     }\r\n\r\n    // let obj2 = {\r\n    //     name : \"hadi\",\r\n    //     family: \"movasseghi\",\r\n    //     username: \"hdix\"\r\n    // }\r\n\r\n    // let obj3=  Object.assign(obj1, obj2)\r\n\r\n    // console.log(obj3, obj1 , obj2)\r\n\r\n\r\n\r\n    // class Class1 {\r\n    //     constructor(){\r\n    //         this.name = \"milad\"\r\n    //     }\r\n    // }\r\n\r\n    // class Class2 {\r\n    //     constructor(){\r\n    //         this.family = \"fattah\"\r\n    //     }\r\n    // }\r\n    // let obj1 = new Class1()\r\n    // let obj2 = new Class2()\r\n    // let obj3 = Object.assign({},obj1, obj2)     // {} very important for create new object \r\n    // console.log(obj3)\r\n\r\n\r\n\r\n    // let obj1 ={\r\n    //     name : \"milad\"\r\n    // }\r\n    // let obj2 ={\r\n    //     family : \"fattah\"\r\n    // }\r\n\r\n    // Object.setPrototypeOf(obj2 , obj1)     // param1 ==> target  // param2 ==> giver proto\r\n\r\n    // console.log(obj1)\r\n    // console.log(obj2)\r\n\r\n\r\n\r\n\r\n    // let names = [\"milad\" , \"hadi\" , \"saeid\"]\r\n\r\n\r\n    // names[Symbol.iterator]  = function(){\r\n    //         let that = this\r\n    //         let steps = 0\r\n    //         return {\r\n    //             next(){\r\n    //                 let obj = {\r\n    //                     done : steps >= that.length,\r\n    //                     value : that[steps]\r\n    //                 }\r\n    //                 steps ++\r\n    //                 return obj\r\n    //             }\r\n    //         }\r\n    // }\r\n\r\n\r\n    // let namesIt = names[Symbol.iterator]()\r\n\r\n    // console.log(namesIt.next())\r\n    // console.log(namesIt.next())\r\n    // console.log(namesIt.next())\r\n    // console.log(namesIt.next())\r\n\r\n\r\n    // for(const name of names){\r\n    //     console.log(name)\r\n    // }\r\n\r\n// ==================================\r\n\r\n    // let objectin = {\r\n    //     name : \"milad\",\r\n    //     dayli :[\r\n    //         {\r\n    //             morning : [9 ,12]\r\n    //         },\r\n    //         {\r\n    //             evining : [13,19]\r\n    //         },\r\n    //         {\r\n    //             thenight : [19,2]\r\n    //         }\r\n    //     ],\r\n    //     [Symbol.iterator](){\r\n    //         let that = this.dayli\r\n    //         let step = 0\r\n    //         return {\r\n    //             next(){\r\n    //                 let obj = {\r\n    //                     done : step >= that.length,\r\n    //                     value : that[step]\r\n    //                 }\r\n    //                 step++\r\n    //                 return obj\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n\r\n    // for(let itm of objectin.dayli){\r\n    //     console.log(itm)\r\n    // }\r\n\r\n\r\n// ==================================\r\n\r\n//     let user = {\r\n//         name : \"milad\",\r\n//         id : 1 ,\r\n//         post : [\r\n//             {\r\n//                 id: 1 ,\r\n//                 masseage : \"this is a one post\"\r\n//             },\r\n//             {\r\n//                 id : 2 ,\r\n//                 masseage : \"this is a  two post0\"\r\n//             }\r\n//         ]\r\n//     }\r\n\r\n//     user[Symbol.iterator] = function(){\r\n//         let that  = this.post\r\n//         let step = 0\r\n//         return {\r\n//             next(){\r\n//                 let obj ={\r\n//                     done : step >= that.length,\r\n//                     value: that[step]\r\n//                 }\r\n//                 step++\r\n//                 return obj\r\n//             }\r\n//         }\r\n//     }\r\n\r\n// // let userIt =  user[Symbol.iterator]()\r\n\r\n// //     console.log(userIt.next())\r\n// //     console.log(userIt.next())\r\n\r\n\r\n//     for( let post of user){\r\n//         console.log(post)\r\n//     }\r\n\r\n\r\n    // let names = [\"milad\", \"hadi\" , \"saeid\"]\r\n    // names[Symbol.iterator] = function(){\r\n    //     let that = this\r\n    //     let step = 0\r\n    //     return {\r\n            \r\n    //         next(){\r\n    //             let obj = {\r\n    //                 done : step >= that.length ,\r\n    //                 value: that[step]\r\n    //             }\r\n    //             step++\r\n    //             return obj\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // let namesIt = names[Symbol.iterator]()\r\n\r\n\r\n   \r\n\r\n\r\n    // for(const name of names){\r\n    //     console.log(name)\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n    // let obj = {\r\n    //     name : \"milad\",\r\n    //     family : \"fattah\",\r\n    //     list : [1,2,3,4,5]\r\n\r\n    // }\r\n\r\n    // obj[Symbol.iterator]= function(){\r\n    //   let  that = this.list\r\n    //   let  step = 0\r\n    //     return {\r\n    //         next(){\r\n    //             let objing  = {\r\n    //                 done : step >= that.length,\r\n    //                 value : that[step]\r\n    //             }\r\n    //             step++\r\n    //             return objing\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // for(const item of obj){\r\n    //     console.log(item)\r\n    // }\r\n\r\n\r\n\r\n\r\n// =================================\r\n\r\n\r\n    // function* CreateName(){\r\n    //     yield \"milad\"\r\n    //     yield \"hadi\"\r\n    //     yield \"avA\"\r\n    // }\r\n\r\n    // let result = CreateName()\r\n\r\n    // console.log(result.next())\r\n    // console.log(result.next())\r\n    // console.log(result.next())\r\n    // console.log(result.next())\r\n\r\n\r\n// ===============================\r\n\r\n    // function* retNumber(){\r\n    //     yield 1 \r\n    //     yield 2 \r\n    //     yield 3 \r\n    //     yield 4\r\n    //     yield 5\r\n    //     yield 6\r\n    // }\r\n\r\n\r\n    // let resulting = retNumber()\r\n\r\n    // console.log(resulting.next().value)\r\n    // console.log(resulting.next().value)\r\n    // console.log(resulting.next().value)\r\n    // console.log(resulting.next().value)\r\n    // console.log(resulting.next().value)\r\n    // console.log(resulting.next().value)\r\n    \r\n// ==============================\r\n\r\n    // function* reslutfamily(){\r\n    //     yield \"fattah\"\r\n    //     yield \"movasseghi\"\r\n    //     yield \"sabiri\"\r\n    //     yield \"jelvehgar\"\r\n    // }\r\n  /////  console.log([...reslutfamily()])\r\n    // let res = reslutfamily()\r\n\r\n    // console.log(res.next())\r\n    // console.log(res.next())\r\n    // console.log(res.next())\r\n    // console.log(res.next())\r\n    // console.log(res.next())\r\n\r\n// ========================================\r\n\r\n    // let list = [\"milad\" , \"hadi\" , \"saeid\"]\r\n\r\n    // function* names(){\r\n    //     yield* list\r\n    // }\r\n\r\n    // let namesIt = names()\r\n    // console.log(namesIt.next())\r\n    // console.log(namesIt.next())\r\n    // console.log(namesIt.next())\r\n    // console.log(namesIt.next())\r\n    \r\n    // // for(const i of names()){\r\n    // //     console.log(i)\r\n    // // }\r\n\r\n    // ==========================\r\n\r\n    // let obj = {\r\n    //     name : \"milad\",\r\n    //     family : \"fattah\",\r\n    //     *[Symbol.iterator](){\r\n    //         yield 1\r\n    //         yield 2 \r\n    //         yield 3\r\n    //     }\r\n    // }\r\n\r\n    // let objIt = obj[Symbol.iterator]()\r\n    // console.log(objIt.next())\r\n    // console.log(objIt.next())\r\n    // console.log(objIt.next())\r\n    // console.log(objIt.next())\r\n\r\n    // for(const i of obj) {\r\n    //     console.log(i)\r\n    // }\r\n\r\n    //= =============================\r\n\r\n\r\n    // let obj = {\r\n    //     name : \"obj\",\r\n    //     list : [\"milad\" , \"anysa\" , \"aysoda\"],\r\n    // }\r\n\r\n    // obj[Symbol.iterator] = function*(){\r\n    //     yield* this.list\r\n    // }\r\n\r\n\r\n    // let objIt = obj[Symbol.iterator]()\r\n    // console.log(objIt.next())\r\n    // console.log(objIt.next())\r\n    // console.log(objIt.next())\r\n    // console.log(objIt.next())\r\n\r\n\r\n\r\n\r\n    // for(const i of obj){\r\n    //     console.log(i)\r\n    // }\r\n\r\n// ======================================\r\n        // let objection = {\r\n        //     name :\"milad\",\r\n        //     dayli :[\r\n        //                 {\r\n        //                     morning : [9 ,12]\r\n        //                 },\r\n        //                 {\r\n        //                     evining : [13,19]\r\n        //                 },\r\n        //                 {\r\n        //                     thenight : [19,2]\r\n        //                 }\r\n        //             ],\r\n        //     *[Symbol.iterator](){\r\n        //         yield* this.dayli\r\n        //     }\r\n            \r\n        // }\r\n\r\n        // for(let i of objection){\r\n        // console.log(i)\r\n        // }\r\n// ===================================\r\n\r\n    // let user = {\r\n    //         name : \"milad\",\r\n    //         id : 1 ,\r\n    //         post : [\r\n    //             {\r\n    //                 id: 1 ,\r\n    //                 masseage : \"this is a one post\"\r\n    //             },\r\n    //             {\r\n    //                 id : 2 ,\r\n    //                 masseage : \"this is a  two post0\"\r\n    //             }\r\n    //         ],\r\n    //         *[Symbol.iterator](){\r\n    //             yield* this.post\r\n    //         }\r\n    //     }\r\n\r\n\r\n    //     let userIt = user[Symbol.iterator]()\r\n    //     console.log(userIt.next())\r\n    //     console.log(userIt.next())\r\n    //     console.log(userIt.next())\r\n\r\n\r\n\r\n\r\n        // for(const item of user){\r\n        //     console.log(item)\r\n        // }\r\n\r\n        // =================================\r\n\r\n        // function dosomething(callback){\r\n        //    return setTimeout(() => {\r\n        //             callback(\"run2\")\r\n        //     }, 2000);\r\n        // } \r\n    \r\n\r\n        // console.log(\"run1\")\r\n        // dosomething(function(data){\r\n            //     console.log(data)\r\n        // })\r\n        // console.log(\"run3\")\r\n    // ==========================================\r\n\r\n        // function testcallback(callback,callerror){\r\n        //     setTimeout(() => {\r\n        //         let title = \"this is  a title\"\r\n        //         if(title != \"this is  a title\"){callerror(\"error title\"); return;}\r\n        //         setTimeout(() => {\r\n        //             let data = {user : \"milad\"}\r\n        //             if(!data){callerror(\"error data\"); return;}\r\n        //             callback(data)\r\n        //         }, 2000);\r\n        //     }, 2000);\r\n        // }\r\n\r\n        // console.log(\"run1\")\r\n        \r\n        // testcallback(function(data){\r\n        //     console.log(data)\r\n        // },function(error){\r\n        //     console.log(error)\r\n        // })\r\n\r\n        // console.log(\"run2\")\r\n\r\n    // ==========================================\r\n\r\n        // function testcallback(DataCall , errorCall){\r\n        //     setTimeout(() => {\r\n        //         let title = \"this is a title\"\r\n        //         if(title.startsWith(\"this\")){\r\n        //             setTimeout(() => {\r\n        //                     let data = {user : \"milad\"}\r\n        //                     if(!data){errorCall(\"errordata\"); return;}\r\n        //                     DataCall(data)\r\n        //             }, 2000);    \r\n        //         }else{ errorCall(\"error title\"); return}\r\n        //     }, 2000);\r\n        // }\r\n\r\n        // console.log(\"run1\")\r\n        // testcallback(function(data){\r\n        //     console.log(data)\r\n        // }, function(error){\r\n        //     console.log(error)\r\n        // })\r\n        // console.log(\"run3\")\r\n\r\n    // ==========================================\r\n        // old useing\r\n        // let firstpromise = new Promise((resolve, reject)=>{    \r\n        //     setTimeout(() => {  \r\n        //             reject(\"this is a  error for test promise\")\r\n        //     }, 2000);\r\n        // })\r\n\r\n        // console.log(\"run1\");\r\n        // firstpromise\r\n        // .then(function(data){\r\n        //     console.log(data)\r\n        // }, function(error){\r\n        //     console.log(error)\r\n        // })\r\n        // console.log(\"run3\");\r\n\r\n    // ================================\r\n        //new syntax\r\n\r\n        // let firstpromise = new Promise((resolve, reject)=>{\r\n        //     setTimeout(() => {\r\n        //             resolve(\"this is a  test promise\")\r\n        //     }, 2000);\r\n\r\n        // })\r\n\r\n\r\n        // console.log(\"run1\");\r\n        // firstpromise\r\n        // .then(data => console.log(data))\r\n        // .catch(error => console.log(error))\r\n        // console.log(\"run3\")\r\n    //=============================\r\n    \r\n    // function testcallback(){\r\n    //     return new Promise((resolve, reject)=>{\r\n    //      let title = \"child down 5year\";\r\n    //      if(!title.includes(\"down 5\")){reject(\"this chile not 5year\"); return}\r\n    //      let name = {name : \"anisa\"}\r\n    //      if(!Reflect.ownKeys(name).includes(\"name\")){ reject(\"name is undifind\"); return}\r\n    //      setTimeout(() => {\r\n    //          resolve(name.name)\r\n    //      }, 3000);\r\n         \r\n    //     })\r\n    //  }\r\n\r\n    //  testcallback()\r\n    //  .then(data=>console.log(data))\r\n    //  .catch(error=>console.log(error))\r\n\r\n    // ============================\r\n            // exapmle with callback function\r\n\r\n        // function getUrl(url , callback ,error){\r\n        //     const httpsreqeust = new XMLHttpRequest();\r\n        //     httpsreqeust.open(\"GET\" , url)\r\n        //     httpsreqeust.onreadystatechange = function(){\r\n        //         if(this.readyState == XMLHttpRequest.DONE){\r\n        //             if(this.status== 200){\r\n        //                 let datajson = JSON.parse(this.responseText)\r\n        //                 callback(datajson)\r\n        //             }else if(this.status == 404){\r\n        //                 error(\"error\", this.status)\r\n        //             }else { \r\n        //                 error(\"error\", this.status)     \r\n        //             }\r\n        //         }\r\n        //     }\r\n        //     httpsreqeust.send()\r\n        // }\r\n\r\n\r\n      // getUrl(\"https://jsonplaceholder.typicode.com/posts\" , function(data){ console.log(data)} , function(error){console.log(error)})\r\n\r\n\r\n    // ==================================\r\n\r\n        // function geturl(url){\r\n        //     return new Promise((resolve, reject) =>{\r\n        //         const Requesthttp = new XMLHttpRequest();\r\n        //         Requesthttp.open(\"GET\", url);\r\n        //         Requesthttp.onreadystatechange = function(){\r\n        //             if(this.readyState == XMLHttpRequest.DONE){\r\n        //                 if(this.status == 200){\r\n        //                     resolve(this.response)\r\n        //                 }else if(this.status == 404){\r\n        //                     reject(\"error 404\")\r\n        //                 }else {\r\n        //                     reject(\"worning\")\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //         Requesthttp.send()\r\n        //     })\r\n        // }\r\n\r\n\r\n        // function parseJson(datajson){\r\n        //     return new Promise((resolve , reject)=>{\r\n        //         setTimeout(() => {\r\n        //                 try {\r\n        //                     resolve(JSON.parse(datajson))\r\n        //                 } catch (error) {\r\n        //                     reject(error)\r\n        //                 }\r\n        //         }, 2000);\r\n        //     })\r\n        // }\r\n\r\n\r\n        // geturl(\"https://jsonplaceholder.typicode.com/posts\")\r\n        // .then(json => {\r\n        //     return parseJson(json)\r\n        // })\r\n        // .then(data=> console.log(data))\r\n        // .catch(error => console.log(error))\r\n\r\n        // =======================================\r\n\r\n        // function geturl(url){\r\n        //     return new Promise((resolve , reject)=>{\r\n        //         const Requesthttp = new XMLHttpRequest();\r\n        //          Requesthttp.open(\"GET\" , url)\r\n        //          Requesthttp.onreadystatechange = function(){\r\n        //              if(this.readyState == XMLHttpRequest.DONE){\r\n        //                  if(this.status == 200){\r\n        //                     resolve(this.response)\r\n        //                 }else if ( this.status == 404){\r\n        //                     reject(`${this.status} : error 404`)\r\n        //                  }else{\r\n        //                      reject(`${this.status} : wrong`)\r\n        //                  }\r\n        //              }\r\n        //          }\r\n        //          Requesthttp.send()\r\n        //     });\r\n        // }\r\n\r\n        // function Jsonparse(json){\r\n        //     return new Promise((resolve, reject)=>{\r\n        //         setTimeout(() => {\r\n        //                try {\r\n        //                    resolve( JSON.parse(json) )\r\n        //                } catch (error) {\r\n        //                    reject(error)\r\n        //                }\r\n        //         }, 2000);\r\n        //     })\r\n        // }\r\n\r\n        // geturl(\"https://jsonplaceholder.typicode.com/posts\")\r\n        // .then(data => Jsonparse(data))\r\n        // .then(textjson => console.log(textjson))\r\n        // .catch(error =>console.log(error))\r\n        // ===========================================\r\n        // good example\r\n\r\n        // function geturl(url){\r\n        //     return new Promise((resolve, reject)=>{\r\n        //         const xmlurl = new XMLHttpRequest();\r\n        //         xmlurl.open(\"GET\" , url)\r\n        //         xmlurl.onreadystatechange= function(){\r\n        //             if(this.readyState == XMLHttpRequest.DONE){\r\n        //                 if(this.status !=  200){ reject(`this is erro : ${this.status}`); return;}\r\n        //                 resolve(this.response)\r\n        //             }\r\n        //         }\r\n        //         xmlurl.send()\r\n                \r\n        //     });\r\n        // }\r\n    \r\n        // function DataPars(Jdata){\r\n        //     return new Promise((resolve,reject)=>{\r\n        //         setTimeout(() => {\r\n        //             try {\r\n        //                 resolve(JSON.parse(Jdata))\r\n        //             } catch (error) {\r\n        //                 reject(\"error in parse to json\")\r\n        //             }\r\n        //         }, 2000);\r\n        //     })\r\n        // }\r\n    \r\n        // geturl(\"https://jsonplaceholder.typicode.com/posts\")\r\n        // .then(data=> DataPars(data))\r\n        // .then(datajson => console.log(datajson))\r\n        // .catch(erro=> console.log(erro))\r\n        \r\n        // =======================================\r\n\r\n        // function dosomething(){\r\n        //     let name = \"12ilad\"\r\n\r\n        //     if(name.startsWith(\"m\")){\r\n        //         return Promise.resolve(name)\r\n        //     }else{\r\n        //         return Promise.reject(\"this is a error\")\r\n        //     }\r\n        // }\r\n\r\n\r\n        // dosomething()\r\n        // .then(data =>console.log(data))\r\n        // .catch(error=> console.log(error))\r\n\r\n\r\n        // =================\r\n\r\n        // header  // Promise.all([])  /// return all promise if not rejcet return resolve but if rejcet return reject\r\n\r\n        // let promise1 = new Promise((resolve , reject) => {\r\n        //     setTimeout(() => {\r\n        //         resolve(\"reject\")  // or // reject(\"reject\")\r\n        //     }, 2000);\r\n        // });\r\n\r\n        // let promise2= 42;\r\n\r\n        // let promise3 = new Promise((resolve , reject)=>{\r\n        //     setTimeout(() => {\r\n        //         resolve(\"reslove!!\")\r\n        //     }, 2000);\r\n        // })\r\n\r\n        // Promise.all([promise1 , promise2, promise3])\r\n        // .then(data => console.log(data))\r\n        // .catch( error => console.log(error))\r\n\r\n        // =================================\r\n\r\n        // header // Promise.race([])  /// return lower time promise\r\n\r\n        // let promise1 = new Promise((resolve, reject)=>{\r\n        //     setTimeout(() => {\r\n        //         resolve(\"resolve with time 1s\")       // return this promise  (1s)!importand\r\n        //     }, 1000);\r\n        // })\r\n\r\n        // let promise2 = new Promise((resolve, reject)=>{\r\n        //     setTimeout(() => {\r\n        //         reject(\"reject with time 2s\")\r\n        //     }, 2000);\r\n        // })\r\n\r\n        // let promise3 = new Promise((resolve , reject)=>{\r\n        //     setTimeout(() => {\r\n        //         resolve(\"resolve with time 3s\")\r\n        //     }, 3000);\r\n        // })\r\n    \r\n        // Promise.race([promise1, promise2 , promise3])\r\n        // .then(data => console.log(data))\r\n        // .catch(error => console.log(error))\r\n\r\n\r\n\r\n\r\n        // ==========================================\r\n\r\n        \r\n        // let xsymbol = Symbol(\"data\")\r\n\r\n        // let list = new Map()\r\n\r\n        // list.set('key1' , \"milad\")\r\n        // list.set(xsymbol , \"fattah\")\r\n        // list.set('key3' , \"ava\")\r\n\r\n        // console.log(list.size)    // return size map list\r\n\r\n        // list.delete('key1'); console.log(list.get('key1'))    // return undefind with deleteing key1\r\n\r\n        // list.clear(); console.log(list.get('key1'))         //return undefind with deleteing all key and value\r\n\r\n        // console.log(list.has(\"key3\"))         // if(key3){return true} // if(!key3){ return false}\r\n\r\n        // list.forEach((value , key)=>console.log(key,value))\r\n\r\n        // for(const [key, value] of list){\r\n        //     console.log(key, value)\r\n        // }\r\n\r\n// ===========================================\r\n\r\n    // let sarasymbol = Symbol(\"data sara\")\r\n    // let list = new Map();\r\n\r\n    // list.set('key1' , \"miad\");\r\n    // list.set('key2' , \"ava\")\r\n    // list.set(sarasymbol , \"sara\")\r\n    // console.log(list)\r\n    // // list.forEach((value ,key)=>{console.log(key, value)})\r\n\r\n    // // for(const [key, value] of list){\r\n    // //     console.log(key, value)\r\n    // // }\r\n\r\n    // for(const key of list.keys()){\r\n    //     console.log(key)\r\n    // }\r\n\r\n\r\n    // ========================\r\n    // let listmap = [['key1' , \"milad\"] , ['key2', \"fattah\"] , ['key3' , 20]]\r\n    // let list = new Map(listmap);\r\n    \r\n    \r\n    // console.log(list)\r\n\r\n    // ===============\r\n\r\n        // let familysymobl= Symbol(\"data family\")\r\n\r\n    // let list = new Map();\r\n\r\n    // list.set('key1', \"milad\")\r\n    // list.set(familysymobl , \"fattah\")\r\n    // list.set('key3' , 20)\r\n    // list.delete('key3')\r\n\r\n    // for(const i of list){\r\n        \r\n    // }\r\n\r\n\r\n    //==============\r\n    //فرض کن  این حال بدات از اون سالایی که گذزونیدی مونده مثلا سال قبل همین موقع بد بودی \r\n    // خب؟\r\n    // خب دیگه همین امروز رو با یکم سختی بگذرون ولی خوب و  مفید\r\n    // که چی؟\r\n    // بشه سال های بعدت خوووووب\r\n    // :)\r\n    \r\n\r\n\r\n    //=========================\r\n    // new Set()   // return unic value \r\n\r\n    // let list = new Set();\r\n\r\n    // list.add(3)\r\n    // list.add(\"milad\")\r\n    // list.add(3)\r\n    // list.add(1)\r\n\r\n    // console.log(list.has(\"milad\"))\r\n\r\n\r\n    // =============================\r\n\r\n\r\n    // let list = new Set();\r\n\r\n    // list.add(1)\r\n    // list.add(2)\r\n    // list.add(1)\r\n    // list.add(\"milad\")\r\n\r\n    // list.delete(\"milad\")  // delete value target\r\n    // list.clear()    // clear full value\r\n\r\n    // for (const [key, value] of list.entries()) {\r\n    //     console.log(key, value)\r\n    // }\r\n    \r\n    // console.log(list.has(2))   // if(2)return true  // if(!2)return false\r\n\r\n    // console.log(list)\r\n\r\n\r\n    // =========================\r\n\r\n\r\n    // class CarExam{\r\n    //     constructor(){\r\n    //         this.value = Array(10000000).join(\"mmi\")\r\n    //     }\r\n    // }\r\n    // window.car = new CarExam()\r\n    // let list  = new WeakMap();\r\n\r\n    // list.set(window.car, \"milad\");\r\n\r\n    // delete window.car ; \r\n    // console.log(window.car)\r\n    // console.log(list);\r\n\r\n\r\n\r\n    // ==================\r\n\r\n\r\n    // class Car{\r\n    //     constructor(name , model){\r\n    //         this.name = name ;\r\n    //         this.model = model\r\n    //     }\r\n    // }\r\n\r\n    // // let car1 = new Car(\"207\", \"irankhodro\")\r\n\r\n    // let car1 = Reflect.construct(Car , [\"206\" , \"irankhodro\"])  // create new object from class car //Reflect.construct(targetclass , [values])\r\n    // console.log(car1);\r\n\r\n\r\n    // let car2 = Object.create(null)   // create null object\r\n    // Reflect.setPrototypeOf(car1 ,car2 )  //car1 give proto from null ojbct(car2)\r\n    // let result = Reflect.getPrototypeOf(car1);  // return all proto target\r\n    // console.log(result)\r\n\r\n    // const obj = {\r\n    //     name : \"milad\",\r\n    //     age : 20\r\n    // }\r\n    \r\n    // function exi(family){\r\n    //     return `hello ${this.name} ${family} whether you ${this.age} years old ?`;\r\n    // }\r\n\r\n\r\n    // let result = Reflect.apply(exi, obj, [\"fattah\"])// use apply method in the Reflect.apply(fntarget , objecttargat, [vaules])\r\n\r\n    // console.log(result)\r\n\r\n    // ================\r\n  \r\n    // class Car{\r\n    //     constructor(name , model){\r\n    //         this.name = name ; \r\n    //         this.model= model;\r\n    //     }\r\n    // }\r\n    // class iranCar {\r\n    //     constructor(){}\r\n    // }\r\n    // let On_car = Reflect.construct(Car , [\"pejoPars\" , 99], iranCar )\r\n\r\n\r\n    // let obj = {\r\n    //     name : \"sara\",\r\n    //     age : 20\r\n    // }\r\n\r\n    // function ex(before){\r\n    //     return `${before} , my name is ${this.name} and i have been living in this world for ${this.age} years  `\r\n    // }\r\n\r\n    // let result = Reflect.apply(ex, obj, [\"hello\"])\r\n\r\n    // let obj2 = {\r\n    //     name : \"ava\",\r\n    //     family : \"fattah\"\r\n    // }\r\n    // Reflect.setPrototypeOf(obj2 , On_car)\r\n    // let res = Reflect.getPrototypeOf(obj2)\r\n    // console.log(obj2)\r\n    // console.log(res)\r\n\r\n    // let obj = {\r\n    //     name : \"milad\"\r\n    // }\r\n\r\n    // Reflect.deleteProperty(obj, \"name\")\r\n    // Reflect.defineProperty(obj , \"age\" , {\r\n    //     value : 20,\r\n    //     writable: false  // dont write again this  property\r\n\r\n    // })\r\n    \r\n    // Reflect.preventExtensions(obj)  //  change to !extensible\r\n    // console.log(Reflect.isExtensible(obj)) // return true||false for extensible\r\n    // obj.name =\"s\"\r\n    // console.log(obj)\r\n    \r\n    // let syy = Symbol(\"dis\")\r\n    // let obj2 = {\r\n    //     name : \"milad\", \r\n    //     age : 20 , \r\n    //     [syy] : \"fattah\"\r\n    // }\r\n    // console.log(Reflect.has(obj2, syy)); // return true||flase for has property\r\n    // Reflect.set(obj2 , \"life\" , \"good\") // set new property\r\n    // console.log(obj2)\r\n    // console.log(Reflect.get(obj2 , \"age\")) // get target property\r\n  \r\n    // let array = [\"milad\" , \"anisa\" , \"aysoda\"];\r\n    // let result = Reflect.get(array , 2) // return key name\r\n    // console.log(result)\r\n\r\n    // let onkeys = Reflect.ownKeys(obj2) // return all keys in the obj or array\r\n    // console.log(onkeys)\r\n  \r\n    // ============================/\r\n\r\n    // class Car{\r\n    //     constructor(make , model){\r\n    //         this.make = make ; \r\n    //         this.model = model;\r\n    //     }\r\n    // }\r\n\r\n    // let carobj = new Car(\"IranKhodor\"  , \"207\");\r\n\r\n    // let handler = {\r\n    //     get(obj , propkey){\r\n        \r\n\r\n    //         return propkey in obj \r\n    //         ? obj[propkey] \r\n    //         : \"not fount property\"\r\n    //         // -----------\r\n    //         // return Reflect.has(obj,propkey)\r\n    //         // ?obj[propkey]\r\n    //         // :`not fo`\r\n    //     },\r\n    //     set(obj , propkey , value){\r\n    //         if(typeof value != 'number'){\r\n    //         console.log('not number'); return;\r\n    //         }\r\n    //         return Reflect.set(obj, propkey , value)\r\n    //     },\r\n    //     has(obj, propkey){\r\n    //         return propkey in obj ? true : false;\r\n    //     }\r\n        \r\n    // }\r\n    // let proxy = new Proxy(carobj, handler);\r\n    // // proxy.dd = 122\r\n    // // console.log(proxy.dd)\r\n\r\n//    ===============================\r\n\r\n    // class Car {\r\n    //     constructor(make , model ){\r\n    //         this.make = make ;\r\n    //         this.model = model ; \r\n\r\n    //     }\r\n    // }\r\n\r\n    // let objcar = new Car(\"iranKhodro\"  ,  \"206\");\r\n\r\n    // let handing = {\r\n    //     get(obj ,propkey){\r\n    //         return propkey in obj ? obj[propkey] : \"not font\"\r\n    //     },\r\n    //     has(obj ,propkey){\r\n    //         return Reflect.has(obj, propkey)\r\n    //     },\r\n    //     set(obj , propkey ,value){\r\n    //         if(typeof value != 'number'){\r\n    //             console.log(\"not number\"); return;\r\n    //         }\r\n    //         return Reflect.set(obj, propkey , value)\r\n    //     }\r\n    // }\r\n    // let {proxy , revoke} = Proxy.revocable(objcar , handing)\r\n    // // revoke()   // revoke all proxy\r\n    // console.log(\"dsf\" in proxy)\r\n    // proxy.dify = 12\r\n    // console.log(proxy.dify)\r\n  \r\n  \r\n        // function sum(a, b){\r\n        //     return a + b ;\r\n        // }\r\n\r\n        // let handler = {\r\n        //     apply(target , thisArgsS , args){\r\n        //         console.log(`target : ${target} , arguments : ${thisArgsS} , args : ${args}`);\r\n        //         return target(...args)\r\n        //     }\r\n        // }\r\n\r\n        // let {proxy , revoke} =  Proxy.revocable(sum , handler)\r\n\r\n        // // revoke()  // use  for revoeking the proxy\r\n        \r\n        // console.log(proxy(1,9))\r\n\r\n        // =====================\r\n     \r\n\r\n        // class car{\r\n        //     constructor(name , model){\r\n        //         this.name = name ;\r\n        //         this.model = model;\r\n        //     }\r\n        // }\r\n        // let obj = new car(\"206\", \"irankhodro\")\r\n\r\n        // let handing = {\r\n        //     get(obj , propkey){\r\n        //         return propkey in obj \r\n        //         ? obj[propkey]\r\n        //         : \"not property\"\r\n        //    },\r\n        //    set(obj , propkey , argumentss){\r\n        //        if(typeof argumentss != 'number'){console.log(\"not numer\");return}\r\n        //         Reflect.set(obj, propkey , argumentss)\r\n        //    },\r\n        //    has(obj, argu){\r\n        //      return argu in obj ? console.log(\"Ok\") : console.log(\"nos\")\r\n        //    }\r\n        // }\r\n        // let { proxy ,revoke} = Proxy.revocable(obj , handing);\r\n        \r\n        // Reflect.set(proxy , \"age\", \"0\")\r\n\r\n        // console.log(Reflect.has(proxy ,\"f\"))\r\n\r\n        // function sum(a,b){\r\n        //     return a + b;\r\n        // }\r\n\r\n        // let obj = {\r\n        //     number : 10\r\n        // }\r\n        // let handler= {\r\n        //     apply(target  ,thisArgs, arg){\r\n        //         console.log(target, thisArgs , arg)\r\n        //         return target(...arg) + 2\r\n        //     }\r\n        // }\r\n\r\n        // let {proxy , revoke} =  Proxy.revocable(sum , handler)\r\n        // revoke()\r\n        // console.log(proxy(22,2))\r\n\r\n        // ==================================\r\n\r\n\r\n        \r\n        // const name = \"milad\";\r\n        // export {\r\n        //     name\r\n        // }\r\n        // import {name} from \"location\"\r\n        // ------------------\r\n\r\n        // const name = \"milad\"\r\n        // export default name\r\n        // import name from \"location\"\r\n        \r\n        // ------------------\r\n        \r\n       \r\n        \r\n    //   1  // import log , {config as error, name} from \"./logger\"\r\n\r\n        // log.success(\"success fully\");\r\n        // log.error(\"erroring\")\r\n        // error(\"do somethign error\")\r\n        // console.log(name)\r\n\r\n// ----------------------------------------------\r\n\r\n        // import * as fulllog from \"./logger\"\r\n        // console.log(fulllog);  // show all importing\r\n\r\n        // fulllog.default.success(\"ok\")\r\n        // fulllog.default.error(\"no\")\r\n\r\n        // fulllog.config(\"this is config function\")\r\n            \r\n        // console.log(fulllog.name)\r\n\r\n\r\n        // ======================================\r\n\r\n\r\n\r\n        class Car{\r\n            constructor(name, model , make , country){\r\n                this.name = name ; \r\n                this.model = model  ; \r\n                this.make = make; \r\n                this.country = country ; \r\n            }\r\n\r\n           static ext(){\r\n                console.log(`%c  ${this.name} is not fond` ,'red')\r\n            }\r\n        }\r\n\r\n        class SaipaCar extends Car{\r\n            constructor(name , model , make , country ,mony ,owner){\r\n                super(name, model , make , country)\r\n                this.mony = mony ;\r\n                this.owner = owner ;\r\n            }\r\n\r\n            static test(){\r\n                return \"do something \"\r\n            }\r\n        }\r\n\r\n\r\n        let saipacar = new SaipaCar(\"111\", 99, \"saipa\" , \"iran\" , \"100$\" , \"sarajelvehgar\");\r\n\r\n        let onecar= new Car(\"206\" , \"pjo\" , \"irankhodro\", \"Iran\")\r\n\r\n\r\n        console.log(SaipaCar.test())\n\n//# sourceURL=webpack://try/./jsSrc/trying.js?");
/******/ })()
;